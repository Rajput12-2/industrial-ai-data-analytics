# -*- coding: utf-8 -*-
"""Internship_Project_Industrial_AI_English.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/19voUEMdMAjGFZsRhEgYBIu6rx4LaITiO

# ðŸ“˜ Internship Project â€“ Industrial AI & Data Analytics
**Dataset:** `munjal_production_data new ...1.xlsx` (Sheet1)

**Author:** Umesh

**Purpose:** Analyze production data, visualize trends, identify defects, and provide actionable recommendations.

## Step 1: Import Libraries & Load Data
**Explanation:**
We will import the required Python libraries for data analysis and visualization, and load the dataset.
"""

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

# Load dataset
file_path = "/content/munjal_production_data new ...1.xlsx"
df = pd.read_excel(file_path, sheet_name="Sheet1")

df.head()

"""## Step 2: Data Cleaning
**Explanation:**
We will clean the dataset: convert the date column, rename columns for consistency, handle missing values, and create a new feature `Defect_Rate`.
"""

# Convert Date to datetime
df['Date'] = pd.to_datetime(df['Date'], errors='coerce')

# Rename columns for consistency
df = df.rename(columns={
    "Quantity Produced": "Quantity_Produced",
    "Defects Found": "Defects_Found",
    "Cycle Time (min)": "Cycle_Time",
    "Temperature (Â°C)": "Temperature",
    "Pressure (bar)": "Pressure"
})

# Handle missing values
df['Quantity_Produced'] = df['Quantity_Produced'].fillna(df['Quantity_Produced'].median())
df['Defects_Found'] = df['Defects_Found'].fillna(0)

# Feature: Defect Rate
df['Defect_Rate'] = (df['Defects_Found'] / df['Quantity_Produced']) * 100

df.info()

"""## Step 3: Shift-wise Production
**Explanation:**
We will calculate total production for each shift and visualize it using a bar chart.
"""

shift_summary = df.groupby("Shift")["Quantity_Produced"].sum().reset_index()

plt.figure(figsize=(6,4))
sns.barplot(x="Shift", y="Quantity_Produced", data=shift_summary, palette="viridis")
plt.title("Shift-wise Production")
plt.ylabel("Quantity Produced")
plt.show()

"""## Step 4: Machine-wise Defects
**Explanation:**
We will analyze the number of defects across machines and visualize which machine has the highest defects.
"""

machine_defects = df.groupby("Machine ID")["Defects_Found"].sum().reset_index()

plt.figure(figsize=(7,4))
sns.barplot(x="Machine ID", y="Defects_Found", data=machine_defects, palette="magma")
plt.title("Machine-wise Defects")
plt.ylabel("Total Defects Found")
plt.show()

"""## Step 5: Temperature vs Defects
**Explanation:**
We will visualize the relationship between temperature and defects, comparing across different shifts.
"""

plt.figure(figsize=(6,4))
sns.scatterplot(x="Temperature", y="Defects_Found", hue="Shift", data=df, palette="deep")
plt.title("Effect of Temperature on Defects")
plt.show()

"""## Step 6: Cycle Time vs Production
**Explanation:**
We will analyze the relationship between cycle time and production, and compare it across different shifts.
"""

plt.figure(figsize=(6,4))
sns.scatterplot(x="Cycle_Time", y="Quantity_Produced", hue="Shift", data=df, palette="dark")
plt.title("Cycle Time vs Production")
plt.show()

"""## Step 7: Insights & Recommendations
**Explanation:**
We will generate key insights from the data and provide recommendations to improve production quality and efficiency.
"""

print("âœ… Highest Production Shift:")
print(shift_summary.loc[shift_summary['Quantity_Produced'].idxmax()])

print("\nâœ… Machine with Max Defects:")
print(machine_defects.loc[machine_defects['Defects_Found'].idxmax()])

print("\nâœ… Correlation between Temperature & Defects:")
print(df['Temperature'].corr(df['Defects_Found']))

# Recommendations
print("\nðŸ“Œ Recommendations:")
print("1. Machine with maximum defects requires preventive maintenance.")
print("2. Maintain temperature below ~182Â°C to reduce defects.")
print("3. Optimal cycle time range is 15-16 minutes for efficiency.")
print("4. Strengthen quality control during the Evening shift.")

"""## Step 8: Save Cleaned Data
**Explanation:**
We will save the cleaned dataset into an Excel file for future analysis and reporting.
"""

cleaned_file = "/content/cleaned_data.xlsx"
df.to_excel(cleaned_file, index=False)

print("âœ… Cleaned dataset saved at:", cleaned_file)

# Optional: Download cleaned file
from google.colab import files
files.download(cleaned_file)

"""## Step 9: Conclusion
**Explanation:**
- Morning shift shows the highest production.
- Machine M-103 has the maximum defects, requiring preventive maintenance.
- Defects increase with temperature (threshold around 182Â°C).
- Optimal cycle time range is 15â€“16 minutes for efficiency.
- Evening shift quality control needs improvement.
"""